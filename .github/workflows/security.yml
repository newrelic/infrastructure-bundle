name: Security scan
on:
  pull_request:
  schedule:
    - cron: "14 3 * * *" # Daily at 3:14 AM

jobs:
  build:
    name: Build and scan image
    runs-on: ubuntu-latest
    env:  # Variables as understood by docker-build.sh
      DOCKER_IMAGE: newrelic/infrastructure-bundle
      DOCKER_IMAGE_TAG: ci
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/setup-go@v3
        with:
          go-version: '1.19'

      - name: Download integrations
        run: go run downloader.go

      - name: Build and load docker image for linux/amd64
        run: |
          DOCKER_PLATFORMS=linux/amd64 ./docker-build.sh . --load

      - name: Run Trivy in table mode
        # Table output is only useful when running on a pull request.
        if: ${{ github.event_name == 'pull_request' }}
        uses: aquasecurity/trivy-action@0.7.1
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_IMAGE_TAG }}
          format: table
          exit-code: 1
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy in report mode
        # Only generate sarif when running nightly on the main branch.
        if: ${{ github.event_name == 'schedule' }}
        uses: aquasecurity/trivy-action@0.7.1
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_IMAGE_TAG }}
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          ignore-unfixed: false  # Get full report when running nightly.
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        # Only upload sarif when running nightly on the main branch.
        if: ${{ github.event_name == 'schedule' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.CAOS_SNYK_TOKEN }}
        with:
          image: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_IMAGE_TAG }}
          args: --file=Dockerfile --severity-threshold=critical
